
# 如果当前kubelet 正在运行那么就不改变当前节点
- name: 判断 Kubelet 是否正在运行
  shell: >
    systemctl status kubelet | grep running || echo "not running"
  register: kubelet_already_running

- import_tasks: ubuntu.yml
  when:
  - 'ansible_distribution in ["Ubuntu","Debian"]'
  - '"active" not in kubelet_already_running.stdout'

- import_tasks: centos.yml
  when:
  - 'ansible_distribution in ["CentOS","RedHat","Amazon","Aliyun"]'
  - '"active" not in kubelet_already_running.stdout'

- name: 获取第一个节点的LB 地址
  shell: |
    echo "{{ current_host_ip }} lb.kubernetes.com"
  register: lb_address

- name: 判断 Docker 是否早已安装
  shell: >
    systemctl status docker | grep running || echo "not running"
  register: docker_already_running

- name: 设置 container_manager_detected 变量
  set_fact:
    container_manager_detected: >-
      {%- if "active" in docker_already_running.stdout -%}
      docker
      {%- else -%}
      containerd
      {%- endif -%}

- name: 创建 kubernetes 相关目录
  file: 
    name: "{{ item }}"
    state: directory
  with_items:
  - "{{ kubelet_root_dir }}"
  - "{{ audit_policy_file | dirname }}"
  - /etc/kubernetes/pki
  - /etc/kubernetes/config
  - /etc/kubernetes/manifests
  - /var/log/kubernetes/audit
  - /usr/share/bash-completion/completions
  when:
  - '"active" not in kubelet_already_running.stdout'


- name: 读取 kubelet.conf 文件 stat 信息
  stat: 
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf_stat

# 生成 kubeadm 配置
# TODO 后面使用kubemaster 创建实例
- include_tasks: kubeadm-config.yml
  when:
    - '"active" not in kubelet_already_running.stdout'


# 初始化第一个 master 节点
- include_tasks: master-init.yml
  when: 
  - not kubelet_conf_stat.stat.exists
  - inventory_hostname == groups['kube_master'][0]
  - '"active" not in kubelet_already_running.stdout'

# 获取集群token 的值
- include_tasks: token.yml
  when:
    - inventory_hostname == groups['kube_master'][0]

- block:
  # 获取 当前的token值
  - name: 获取token 参数
    shell: |
      echo "{{hostvars[(groups['kube_master'][0])]['kubeadm_token'].stdout}}"
    register: kubeadm_token
  - name: 获取 certificate-key 参数
    shell: |
      echo "{{hostvars[(groups['kube_master'][0])]['certificate_key'].stdout}}"
    register: certificate_key
  when:
    - 'inventory_hostname != groups.kube_master[0]'
    - '"active" not in kubelet_already_running.stdout'


# 初始化其他 master 节点
- include_tasks: master-join.yml
  when: 
  - 'inventory_hostname != groups.kube_master[0]'
  - '"active" not in kubelet_already_running.stdout'

